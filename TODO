0.5
----------------------

* sniff user agent for _changes vs. _all_docs_by_seq, etc. (Database subclasses)(work in progress -- needs testing against 0.9.1 and 0.10)
* support authentication against couchdb (basic/digest/etc)
* pause/resume control over indexer.
* status page.
* allow POST with a query array?

* allow c-l operations even if couchdb is down (except include_docs=true, of course)
* correctly handle database deletion, view renames, view adds, deletes, etc.
* add a /test/ endpoint to run test suite.
* configure jetty to return JSON for all errors.

* Lucene 2.9 - done
** numeric range suppport. (indexing size needs testing -- query side needs post-processing or QP tweak)
* use _local/lucene for recording progress. (recorded but not used to detect inconsistencies yet)
* make attachment call support "store":"yes|no"

UNSCHEDULED

* LuceneDictionary/spellcheck/suggestions mode.
* _show and _list-like support for search results.
* distributed search.
* hit highlighting (lucene contrib).
* clustering (carrot2).
* JSONQuery? (http://docs.persvr.org/documentation/jsonquery)
* geospatial (need TrieRangeQuery from 2.9)

Indexing Algorithm;

dbs[] = read _all_dbs
for db in dbs
    ddocs[] = read all design documents
    if no fulltext functions in ddocs
       skip this database
    else
	state = read db._local/lucene
	if state is missing
	   state = new state
	   state.uuid = new random uuid
	   write db._local/lucene
	map db to state.uuid # so SearchServlet can find it
	for ddoc in ddocs
	    for fulltext_fun in ddoc
	    	sig = hash(fulltext_fun)
		map ddoc to sig # so SearchServlet can find it
		if state.sig is missing
		   seq = 0
		   map state.sig to seq
		else
		   seq = state.sig
         	views[] += { sig, state }
            end for
        end for
        lowest_seq = smallest update_seq seen in previous loop
	for change in changes since lowest_seq
          for view in views
            if (view.seq < change.seq)
              apply change to view
          end for
	end for
end for


_local/lucene;

{
  "_id":"_local/lucene",
  "uuid":"<uuid>",
  "indexes": {
    "hash(fulltext_fun1)": {
     update_seq: 10
    },
    "hash(fulltext_fun2)": {
     update_seq: 100
    }
  }
}


